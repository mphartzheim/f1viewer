name: Release

on:
  push:
    tags:
      - '*'

permissions:
  contents: write

jobs:
  release:
    name: Build and release binaries
    runs-on: ${{ matrix.os }}
    env:
      VERSION: ${{ github.ref_name }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            goos: darwin
            goarch: amd64
            ext: ""
            archive_ext: zip
          - os: windows-latest
            goos: windows
            goarch: amd64
            ext: .exe
            archive_ext: zip
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            ext: ""
            archive_ext: tar.gz

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      - name: Set up macOS SDK
        if: matrix.os == 'macos-latest'
        run: |
          sudo xcode-select --switch /Applications/Xcode.app

      - name: Install Linux build dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-dev xorg-dev pkg-config ruby ruby-dev build-essential rpm
          sudo gem install --no-document fpm

      - name: Build binary (macOS)
        if: matrix.os == 'macos-latest'
        env:
          CGO_ENABLED: 1
        run: |
          mkdir -p dist
          go build -ldflags "-X main.version=${{ env.VERSION }}" -o dist/f1viewer

      - name: Build binary (Windows)
        if: matrix.os == 'windows-latest'
        env:
          GOOS: windows
          GOARCH: amd64
          CGO_ENABLED: 1
        run: |
          mkdir -p dist
          go build -ldflags="-H=windowsgui -X main.version=${{ env.VERSION }}" -o dist/f1viewer.exe

      - name: Build binary (Linux)
        if: matrix.os == 'ubuntu-latest'
        env:
          GOOS: linux
          GOARCH: amd64
          CGO_ENABLED: 1
        run: |
          mkdir -p dist
          go build -ldflags "-X main.version=${{ env.VERSION }}" -o dist/f1viewer

      - name: Archive (ZIP)
        if: matrix.archive_ext == 'zip'
        shell: pwsh
        run: |
          Compress-Archive -Path "dist/f1viewer${{ matrix.ext }}" -DestinationPath "dist/f1viewer-${{ matrix.goos }}-${{ matrix.goarch }}.zip"

      - name: Archive (TAR.GZ)
        if: matrix.archive_ext == 'tar.gz'
        run: |
          cd dist
          tar -czf f1viewer-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz f1viewer

      - name: Generate checksums
        run: |
          cd dist
          shasum -a 256 f1viewer-${{ matrix.goos }}-${{ matrix.goarch }}.${{ matrix.archive_ext }} > f1viewer-${{ matrix.goos }}-${{ matrix.goarch }}.${{ matrix.archive_ext }}.sha256

      - name: Build .deb and .rpm packages
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p pkg/usr/local/bin
          cp dist/f1viewer pkg/usr/local/bin/f1viewer

          fpm -s dir -t deb -n f1viewer -v "${VERSION}" -a amd64 -C pkg --prefix=/ -p dist/
          fpm -s dir -t rpm -n f1viewer -v "${VERSION}" -a amd64 -C pkg --prefix=/ -p dist/

      - name: Upload release to GitHub
        uses: softprops/action-gh-release@v1
        with:
          name: "${{ env.VERSION }}"
          body_path: RELEASENOTES.md
          files: |
            dist/f1viewer-${{ matrix.goos }}-${{ matrix.goarch }}.${{ matrix.archive_ext }}
            dist/f1viewer-${{ matrix.goos }}-${{ matrix.goarch }}.${{ matrix.archive_ext }}.sha256
            dist/*.deb
            dist/*.rpm
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
